---
AWSTemplateFormatVersion: 2010-09-09
Description: 'SMDF - ${environment}'

Resources:

  ##
  # Lambda Functions
  ##
  SMDFClientRegistration:
    Type: AWS::Lambda::Function
    Properties:
      Description: Register clients with the monitoring system.
      Runtime: java8
      Handler: '${clientRegistrationHandler}'
      Code:
        S3Bucket: '${codeS3Bucket}'
        S3Key: '${codeS3Key}'
      Role: !GetAtt SMDFClientRegistrationRole.Arn
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          LOG_LEVEL: '${logLevel}'
          ENVIRONMENT: '${environment}'
          CLIENT_CHECK_TOPIC: !Ref SMDFClientCheckDistributor
          DB_TABLE: !Ref SMDFTable
          CHECK_RESULTS_QUEUE: !Ref SMDFCheckResultQueue
      Tags:
        - Key: App
          Value: SMDF
        - Key: Env
          Value: '${environment}'

  SMDFClientDeregistration:
    Type: AWS::Lambda::Function
    Properties:
      Description: De-activate clients of the monitoring system.
      Runtime: java8
      Handler: '${clientDeregistrationHandler}'
      Code:
        S3Bucket: '${codeS3Bucket}'
        S3Key: '${codeS3Key}'
      Role: !GetAtt SMDFClientDeregistrationRole.Arn
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          LOG_LEVEL: '${logLevel}'
          ENVIRONMENT: '${environment}'
          DB_TABLE: !Ref SMDFTable
      Tags:
        - Key: App
          Value: SMDF
        - Key: Env
          Value: '${environment}'

  SMDFDatabaseStreamProcessor:
    Type: AWS::Lambda::Function
    Properties:
      Description: Process events from the database stream.
      Runtime: java8
      Handler: '${databaseStreamProcessor}'
      Code:
        S3Bucket: '${codeS3Bucket}'
        S3Key: '${codeS3Key}'
      Role: !GetAtt SMDFDatabaseStreamProcessorRole.Arn
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          LOG_LEVEL: '${logLevel}'
          ENVIRONMENT: '${environment}'
          DB_TABLE: !Ref SMDFTable
          NOTIFICATION_QUEUE: !Ref SMDFNotificationQueue
      Tags:
        - Key: App
          Value: SMDF
        - Key: Env
          Value: '${environment}'

  SMDFCheckScheduler:
    Type: AWS::Lambda::Function
    Properties:
      Description: Fire events to the SNS Fanout Topic.
      Runtime: java8
      Handler: '${checkSchedulerHandler}'
      Code:
        S3Bucket: '${codeS3Bucket}'
        S3Key: '${codeS3Key}'
      Role: !GetAtt SMDFCheckSchedulerRole.Arn
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          LOG_LEVEL: '${logLevel}'
          ENVIRONMENT: '${environment}'
          CLIENT_CHECK_TOPIC: !Ref SMDFClientCheckDistributor
          SERVERLESS_CHECK_QUEUE: !Ref SMDFServerlessCheckQueue
      Tags:
        - Key: App
          Value: SMDF
        - Key: Env
          Value: '${environment}'

  SMDFCheckResultReceiver:
    Type: AWS::Lambda::Function
    Properties:
      Description: Collect and save results returned from checks.
      Runtime: java8
      Handler: '${checkResultReceiver}'
      Code:
        S3Bucket: '${codeS3Bucket}'
        S3Key: '${codeS3Key}'
      Role: !GetAtt SMDFCheckResultReceiverRole.Arn
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          LOG_LEVEL: '${logLevel}'
          ENVIRONMENT: '${environment}'
          DB_TABLE: !Ref SMDFTable
      Tags:
        - Key: App
          Value: SMDF
        - Key: Env
          Value: '${environment}'

  SMDFNotificationProcessor:
    Type: AWS::Lambda::Function
    Properties:
      Description: Run notification handlers.
      Runtime: java8
      Handler: '${notificationProcessor}'
      Code:
        S3Bucket: '${codeS3Bucket}'
        S3Key: '${codeS3Key}'
      Role: !GetAtt SMDFNotificationProcessorRole.Arn
      # Long timeout to give user some more flexibility.
      Timeout: 300
      # Maximum memory size, since this will run non-core code.
      MemorySize: 3008
      Environment:
        Variables:
          LOG_LEVEL: '${logLevel}'
          ENVIRONMENT: '${environment}'
          DB_TABLE: !Ref SMDFTable
      Tags:
        - Key: App
          Value: SMDF
        - Key: Env
          Value: '${environment}'

  SMDFServerlessCheckProcessor:
    Type: AWS::Lambda::Function
    Properties:
      Description: Run serverless checks.
      Runtime: java8
      Handler: '${serverlessCheckProcessor}'
      Code:
        S3Bucket: '${codeS3Bucket}'
        S3Key: '${codeS3Key}'
      Role: !GetAtt SMDFServerlessCheckProcessorRole.Arn
      # Long timeout to give user some more flexibility.
      Timeout: 300
      # Maximum memory size, since this will run non-core code.
      MemorySize: 3008
      Environment:
        Variables:
          LOG_LEVEL: '${logLevel}'
          ENVIRONMENT: '${environment}'
          CHECK_RESULTS_QUEUE: !Ref SMDFCheckResultQueue
      Tags:
        - Key: App
          Value: SMDF
        - Key: Env
          Value: '${environment}'

  ##
  # IAM Roles
  ##
  SMDFClientRegistrationRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/smdf/${environment}/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBTable
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:BatchGetItem
                  - dynamodb:GetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt SMDFTable.Arn
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:BatchGetItem
                  - dynamodb:GetItem
                Resource:
                  - !Join
                    - '/'
                    - - !GetAtt SMDFTable.Arn
                      - 'index'
                      - 'pk-data-index'
        - PolicyName: SQSClientQueues
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:*
                Resource:
                  - !Join
                    - ':'
                    - - 'arn:aws:sqs'
                      - !Ref 'AWS::Region'
                      - !Ref 'AWS::AccountId'
                      - 'smdf-*'
        - PolicyName: SNSClientSubscriptions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sns:Subscribe
                  - sns:SetSubscriptionAttributes
                  - sns:GetSubscriptionAttributes
                  - sns:Unsubscribe
                Resource:
                  - !Ref SMDFClientCheckDistributor

  SMDFClientDeregistrationRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/smdf/${environment}/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBTable
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:BatchGetItem
                  - dynamodb:GetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt SMDFTable.Arn
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:BatchGetItem
                  - dynamodb:GetItem
                Resource:
                  - !Join
                    - '/'
                    - - !GetAtt SMDFTable.Arn
                      - 'index'
                      - 'pk-data-index'

  SMDFDatabaseStreamProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/smdf/${environment}/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBTableStream
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                  - dynamodb:Query
                Resource:
                  - !GetAtt SMDFTable.StreamArn
        - PolicyName: DynamoDBTable
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt SMDFTable.Arn
        - PolicyName: SQSClientQueues
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:DeleteQueue
                Resource:
                  - !Join
                    - ':'
                    - - 'arn:aws:sqs'
                      - !Ref 'AWS::Region'
                      - !Ref 'AWS::AccountId'
                      - 'smdf-*'
        - PolicyName: SNSClientSubscriptions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sns:Unsubscribe
                Resource:
                  - !Ref SMDFClientCheckDistributor
        - PolicyName: NotificationQueue
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - !GetAtt SMDFNotificationQueue.Arn

  SMDFCheckSchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/smdf/${environment}/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: SNSTopics
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Ref SMDFClientCheckDistributor
        - PolicyName: SQSQueues
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - !GetAtt SMDFServerlessCheckQueue.Arn

  SMDFCheckResultReceiverRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/smdf/${environment}/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CheckResultsQueue
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:ChangeMessageVisibility
                  - sqs:ReceiveMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !GetAtt SMDFCheckResultQueue.Arn
        - PolicyName: DynamoDBTable
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                Resource:
                  - !GetAtt SMDFTable.Arn

  SMDFNotificationProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/smdf/${environment}/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: NotificationQueue
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:ChangeMessageVisibility
                  - sqs:ReceiveMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !GetAtt SMDFNotificationQueue.Arn
        - PolicyName: DynamoDBTable
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt SMDFTable.Arn
        - PolicyName: ParameterStore
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - !Join
                    - ':'
                    - - 'arn:aws:ssm'
                      - !Ref 'AWS::Region'
                      - !Ref 'AWS::AccountId'
                      - 'parameter${notificationHandlerParameterPath}/*'

  SMDFServerlessCheckProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/smdf/${environment}/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ServerlessCheckQueue
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:ChangeMessageVisibility
                  - sqs:ReceiveMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !GetAtt SMDFServerlessCheckQueue.Arn
        - PolicyName: CheckResultQueue
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - !GetAtt SMDFCheckResultQueue.Arn
        - PolicyName: ParameterStore
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - !Join
                    - ':'
                    - - 'arn:aws:ssm'
                      - !Ref 'AWS::Region'
                      - !Ref 'AWS::AccountId'
                      - 'parameter${serverlessExecutorParameterPath}/*'

  ##
  # IAM Roles for Serverless Executors
  ##
  <#list serverlessExecutorPermissions as name, permissions>
    <#assign shortName = name?split(".")?last>
  SMDFServerlessExecutor${shortName}Role:
    Type: AWS::IAM::Role
    Properties:
      Path: '/smdf/${environment}/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
              AWS:
                - !GetAtt SMDFServerlessCheckProcessorRole.Arn
            Action:
              - sts:AssumeRole
      <#if permissions?has_content>
      Policies:
        <#list permissions as permission>
        - PolicyName: '${permission.hashCode()?abs?string.computer}'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  <#list permission.actions as action>
                  - ${action}
                  </#list>
                Resource:
                  <#list permission.resources as resource>
                  - '${resource}'
                  </#list>
        </#list>
      </#if>
  SMDFServerlessExecutor${shortName}Parameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: IAM role for the ${shortName} serverless check.
      Name: '${serverlessExecutorParameterPath}/${name}'
      Type: String
      Value: !GetAtt SMDFServerlessExecutor${shortName}Role.Arn

  </#list>

  ##
  # IAM Roles for Notification Handlers
  ##
  <#list notificationHandlerPermissions as name, permissions>
    <#assign shortName = name?split(".")?last>
  SMDFNotificationHandler${shortName}Role:
    Type: AWS::IAM::Role
    Properties:
      Path: '/smdf/${environment}/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
              AWS:
                - !GetAtt SMDFNotificationProcessorRole.Arn
            Action:
              - sts:AssumeRole
      <#if permissions?has_content>
      Policies:
        <#list permissions as permission>
        - PolicyName: '${permission.hashCode()?abs?string.computer}'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  <#list permission.actions as action>
                  - ${action}
                  </#list>
                Resource:
                  <#list permission.resources as resource>
                  - '${resource}'
                  </#list>
        </#list>
      </#if>
  SMDFNotificationHandler${shortName}Parameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: IAM role for the ${shortName} notification handler.
      Name: '${notificationHandlerParameterPath}/${name}'
      Type: String
      Value: !GetAtt SMDFNotificationHandler${shortName}Role.Arn

  </#list>

  ##
  # IAM Policies & Roles for clients.
  ##
  SMDFECSClientRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'SMDFECSClient-${environment}'
      Path: '/smdf/${environment}/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - !Ref SMDFClientPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole

  SMDFEC2ClientRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'SMDFEC2Client-${environment}'
      Path: '/smdf/${environment}/'
      ManagedPolicyArns:
        - !Ref SMDFClientPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

  SMDFClientInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: 'SMDFEC2Client-${environment}'
      Path: '/smdf/${environment}/'
      Roles:
        - !Ref SMDFEC2ClientRole

  SMDFClientPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: 'SMDFClient-${environment}'
      Description: 'Allows SMDF clients the necessary access for the ${environment} environment.'
      Path: '/smdf/${environment}/'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          # Registration
          - Effect: Allow
            Action:
              - ssm:GetParameter
            Resource:
              - !Join
                - ':'
                - - 'arn:aws:ssm'
                  - !Ref 'AWS::Region'
                  - !Ref 'AWS::AccountId'
                  - !Join
                    - ''
                    - - 'parameter'
                      - !Ref SMDFClientRegistrationParameter
              - !Join
                - ':'
                - - 'arn:aws:ssm'
                  - !Ref 'AWS::Region'
                  - !Ref 'AWS::AccountId'
                  - !Join
                    - ''
                    - - 'parameter'
                      - !Ref SMDFClientDeregistrationParameter
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !GetAtt SMDFClientRegistration.Arn
              - !GetAtt SMDFClientDeregistration.Arn
          # Receiving check messages.
          - Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:DeleteMessageBatch
            Resource:
              - !Join
                - ':'
                - - 'arn:aws:sqs'
                  - !Ref 'AWS::Region'
                  - !Ref 'AWS::AccountId'
                  - 'smdf-*'
          # Sending check results.
          - Effect: Allow
            Action:
              - sqs:SendMessage
              - sqs:SendMessageBatch
            Resource:
              - !GetAtt SMDFCheckResultQueue.Arn

  ##
  # Parameter Store
  ##
  SMDFClientRegistrationParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Client registration function ARN.
      Name: '/${environment}/smdf/registration'
      Type: String
      Value: !GetAtt SMDFClientRegistration.Arn

  SMDFClientDeregistrationParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Client de-registration function ARN.
      Name: '/${environment}/smdf/de-registration'
      Type: String
      Value: !GetAtt SMDFClientDeregistration.Arn

  ##
  # Scheduled Events
  ##
  SMDFCheckSchedulerEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: SMDF check scheduler event rule.
      ScheduleExpression: rate(1 minute)
      State: ENABLED
      Targets:
        - Arn: !GetAtt SMDFCheckScheduler.Arn
          Id: SMDFCheckScheduler

  SMDFCheckSchedulerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SMDFCheckScheduler
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SMDFCheckSchedulerEventRule.Arn

  ###
  # Event Source Mappings
  ###
  SMDFTableEvents:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      EventSourceArn: !GetAtt SMDFTable.StreamArn
      FunctionName: !GetAtt SMDFDatabaseStreamProcessor.Arn
      StartingPosition: LATEST
      BatchSize: 10

  SMDFCheckResultReceiverEvents:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      EventSourceArn: !GetAtt SMDFCheckResultQueue.Arn
      FunctionName: !GetAtt SMDFCheckResultReceiver.Arn
      BatchSize: 10

  SMDFNotificationProcessorEvents:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      EventSourceArn: !GetAtt SMDFNotificationQueue.Arn
      FunctionName: !GetAtt SMDFNotificationProcessor.Arn
      BatchSize: 1

  SMDFServerlessCheckProcessorEvents:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      EventSourceArn: !GetAtt SMDFServerlessCheckQueue.Arn
      FunctionName: !GetAtt SMDFServerlessCheckProcessor.Arn
      BatchSize: 1

  ##
  # SQS Queues
  #
  # Visibility timeouts must be >= the Lambda function that consumes from it.
  ##
  SMDFCheckResultQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 65
      Tags:
        - Key: App
          Value: SMDF
        - Key: Env
          Value: '${environment}'

  SMDFNotificationQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 305
      Tags:
        - Key: App
          Value: SMDF
        - Key: Env
          Value: '${environment}'

  SMDFServerlessCheckQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 305
      Tags:
        - Key: App
          Value: SMDF
        - Key: Env
          Value: '${environment}'

  ##
  # SNS Topics
  ##
  SMDFClientCheckDistributor:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: 'smdf-${environment}-client-check-distributor'

  ##
  # DynamoDB Tables
  ##
  SMDFTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: data
          AttributeType: S
        - AttributeName: active
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: pk-data-index
          KeySchema:
            - AttributeName: pk
              KeyType: HASH
            - AttributeName: data
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      GlobalSecondaryIndexes:
        # Sparse index for clients.
        - IndexName: data-active-index
          KeySchema:
            - AttributeName: data
              KeyType: HASH
            - AttributeName: active
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: App
          Value: SMDF
        - Key: Env
          Value: '${environment}'
