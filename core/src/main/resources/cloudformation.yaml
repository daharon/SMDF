---
AWSTemplateFormatVersion: 2010-09-09
Description: Monitoring

Resources:

  ##
  # Lambda Functions
  ##
  MonitoringClientRegistration:
    Type: AWS::Lambda::Function
    Properties:
      Description: Register clients with the monitoring system.
      Runtime: java8
      Handler: '${clientRegistrationHandler}'
      Code:
        S3Bucket: '${codeS3Bucket}'
        S3Key: '${codeS3Key}'
      Role: !GetAtt MonitoringClientRegistrationRole.Arn
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          ENVIRONMENT: '${environment}'
          CLIENT_CHECK_TOPIC: !Ref MonitoringClientCheckDistributor
          DB_TABLE: !Ref MonitoringTable
          CHECK_RESULTS_QUEUE: !Ref MonitoringCheckResultQueue
      Tags:
        - Key: App
          Value: Monitoring
        - Key: Env
          Value: '${environment}'

  MonitoringDatabaseStreamProcessor:
    Type: AWS::Lambda::Function
    Properties:
      Description: Process events from the database stream.
      Runtime: java8
      Handler: '${databaseStreamProcessor}'
      Code:
        S3Bucket: '${codeS3Bucket}'
        S3Key: '${codeS3Key}'
      Role: !GetAtt MonitoringDatabaseStreamProcessorRole.Arn
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          ENVIRONMENT: '${environment}'
          DB_TABLE: !Ref MonitoringTable
          NOTIFICATION_QUEUE: !Ref MonitoringNotificationQueue
      Tags:
        - Key: App
          Value: Monitoring
        - Key: Env
          Value: '${environment}'

  MonitoringCheckScheduler:
    Type: AWS::Lambda::Function
    Properties:
      Description: Fire events to the SNS Fanout Topic.
      Runtime: java8
      Handler: '${checkSchedulerHandler}'
      Code:
        S3Bucket: '${codeS3Bucket}'
        S3Key: '${codeS3Key}'
      Role: !GetAtt MonitoringCheckSchedulerRole.Arn
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          ENVIRONMENT: '${environment}'
          CLIENT_CHECK_TOPIC: !Ref MonitoringClientCheckDistributor
          SERVERLESS_CHECK_QUEUE: !Ref MonitoringServerlessCheckQueue
      Tags:
        - Key: App
          Value: Monitoring
        - Key: Env
          Value: '${environment}'

  MonitoringCheckResultReceiver:
    Type: AWS::Lambda::Function
    Properties:
      Description: Collect and save results returned from checks.
      Runtime: java8
      Handler: '${checkResultReceiver}'
      Code:
        S3Bucket: '${codeS3Bucket}'
        S3Key: '${codeS3Key}'
      Role: !GetAtt MonitoringCheckResultReceiverRole.Arn
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          ENVIRONMENT: '${environment}'
          DB_TABLE: !Ref MonitoringTable
      Tags:
        - Key: App
          Value: Monitoring
        - Key: Env
          Value: '${environment}'

  MonitoringNotificationProcessor:
    Type: AWS::Lambda::Function
    Properties:
      Description: Run notification handlers.
      Runtime: java8
      Handler: '${notificationProcessor}'
      Code:
        S3Bucket: '${codeS3Bucket}'
        S3Key: '${codeS3Key}'
      Role: !GetAtt MonitoringNotificationProcessorRole.Arn
      # Long timeout to give user some more flexibility.
      Timeout: 300
      # Maximum memory size, since this will run non-core code.
      MemorySize: 3008
      Environment:
        Variables:
          ENVIRONMENT: '${environment}'
      Tags:
        - Key: App
          Value: Monitoring
        - Key: Env
          Value: '${environment}'

  MonitoringServerlessCheckProcessor:
    Type: AWS::Lambda::Function
    Properties:
      Description: Run serverless checks.
      Runtime: java8
      Handler: '${serverlessCheckProcessor}'
      Code:
        S3Bucket: '${codeS3Bucket}'
        S3Key: '${codeS3Key}'
      Role: !GetAtt MonitoringServerlessCheckProcessorRole.Arn
      # Long timeout to give user some more flexibility.
      Timeout: 300
      # Maximum memory size, since this will run non-core code.
      MemorySize: 3008
      Environment:
        Variables:
          ENVIRONMENT: '${environment}'
          CHECK_RESULTS_QUEUE: !Ref MonitoringCheckResultQueue
      Tags:
        - Key: App
          Value: Monitoring
        - Key: Env
          Value: '${environment}'

  ##
  # IAM Roles
  ##
  MonitoringClientRegistrationRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/monitoring/${environment}/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBClientsTable
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:BatchGetItem
                  - dynamodb:GetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt MonitoringTable.Arn
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:BatchGetItem
                  - dynamodb:GetItem
                Resource:
                  - !Join
                    - '/'
                    - - !GetAtt MonitoringTable.Arn
                      - 'index'
                      - 'pk-data-index'
        - PolicyName: SQSClientQueues
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:*
                Resource:
                  - !Join
                    - ':'
                    - - 'arn:aws:sqs'
                      - !Ref 'AWS::Region'
                      - !Ref 'AWS::AccountId'
                      - 'monitoring-*'
        - PolicyName: SNSClientSubscriptions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sns:Subscribe
                  - sns:SetSubscriptionAttributes
                  - sns:GetSubscriptionAttributes
                  - sns:Unsubscribe
                Resource:
                  - !Ref MonitoringClientCheckDistributor

  MonitoringDatabaseStreamProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/monitoring/${environment}/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBTableStream
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                  - dynamodb:Query
                Resource:
                  - !GetAtt MonitoringTable.StreamArn
        - PolicyName: DynamoDBTable
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !GetAtt MonitoringTable.Arn
        - PolicyName: SQSClientQueues
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:DeleteQueue
                Resource:
                  - !Join
                    - ':'
                    - - 'arn:aws:sqs'
                      - !Ref 'AWS::Region'
                      - !Ref 'AWS::AccountId'
                      - 'monitoring-*'
        - PolicyName: SNSClientSubscriptions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sns:Unsubscribe
                Resource:
                  - !Ref MonitoringClientCheckDistributor
        - PolicyName: NotificationQueue
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - !GetAtt MonitoringNotificationQueue.Arn

  MonitoringCheckSchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/monitoring/${environment}/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: SNSTopics
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Ref MonitoringClientCheckDistributor
        - PolicyName: SQSQueues
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - !GetAtt MonitoringServerlessCheckQueue.Arn

  MonitoringCheckResultReceiverRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/monitoring/${environment}/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CheckResultsQueue
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:ChangeMessageVisibility
                  - sqs:ReceiveMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !GetAtt MonitoringCheckResultQueue.Arn
        - PolicyName: DynamoDBCheckResultsTable
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                Resource:
                  - !GetAtt MonitoringTable.Arn

  MonitoringNotificationProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/monitoring/${environment}/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: NotificationQueue
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:ChangeMessageVisibility
                  - sqs:ReceiveMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !GetAtt MonitoringNotificationQueue.Arn

  MonitoringServerlessCheckProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/monitoring/${environment}/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ServerlessCheckQueue
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:ChangeMessageVisibility
                  - sqs:ReceiveMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !GetAtt MonitoringServerlessCheckQueue.Arn
        - PolicyName: CheckResultQueue
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - !GetAtt MonitoringCheckResultQueue.Arn

  ##
  # Parameter Store
  ##
  MonitoringClientRegistrationParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Client registration function ARN.
      Name: '/${environment}/monitoring/registration'
      Type: String
      Value: !GetAtt MonitoringClientRegistration.Arn

  ##
  # Scheduled Events
  ##
  MonitoringCheckSchedulerEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Monitoring check scheduler event rule.
      ScheduleExpression: rate(1 minute)
      State: ENABLED
      Targets:
        - Arn: !GetAtt MonitoringCheckScheduler.Arn
          Id: MonitoringCheckScheduler

  MonitoringCheckSchedulerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MonitoringCheckScheduler
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt MonitoringCheckSchedulerEventRule.Arn

  ###
  # Event Source Mappings
  ###
  MonitoringTableEvents:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      EventSourceArn: !GetAtt MonitoringTable.StreamArn
      FunctionName: !GetAtt MonitoringDatabaseStreamProcessor.Arn
      StartingPosition: LATEST
      BatchSize: 10

  MonitoringCheckResultReceiverEvents:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      EventSourceArn: !GetAtt MonitoringCheckResultQueue.Arn
      FunctionName: !GetAtt MonitoringCheckResultReceiver.Arn
      BatchSize: 10

  MonitoringNotificationProcessorEvents:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      EventSourceArn: !GetAtt MonitoringNotificationQueue.Arn
      FunctionName: !GetAtt MonitoringNotificationProcessor.Arn
      BatchSize: 1

  MonitoringServerlessCheckProcessorEvents:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      EventSourceArn: !GetAtt MonitoringServerlessCheckQueue.Arn
      FunctionName: !GetAtt MonitoringServerlessCheckProcessor.Arn
      BatchSize: 1

  ##
  # SQS Queues
  #
  # Visibility timeouts must be >= the Lambda function that consumes from it.
  ##
  MonitoringCheckResultQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 65
      Tags:
        - Key: App
          Value: Monitoring
        - Key: Env
          Value: '${environment}'

  MonitoringNotificationQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 305
      Tags:
        - Key: App
          Value: Monitoring
        - Key: Env
          Value: '${environment}'

  MonitoringServerlessCheckQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 305
      Tags:
        - Key: App
          Value: Monitoring
        - Key: Env
          Value: '${environment}'

  ##
  # SNS Topics
  ##
  MonitoringClientCheckDistributor:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: 'monitoring-${environment}-client-check-distributor'

  ##
  # DynamoDB Tables
  ##
  MonitoringTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: data
          AttributeType: S
        - AttributeName: active
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: pk-data-index
          KeySchema:
            - AttributeName: pk
              KeyType: HASH
            - AttributeName: data
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      GlobalSecondaryIndexes:
        # Sparse index for clients.
        - IndexName: data-active-index
          KeySchema:
            - AttributeName: data
              KeyType: HASH
            - AttributeName: active
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: App
          Value: Monitoring
        - Key: Env
          Value: '${environment}'
